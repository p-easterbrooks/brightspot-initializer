/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2016-01-13 16:35:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cms.WEB_002dINF.field.set;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.psddev.cms.db.Content;
import com.psddev.cms.db.ToolUi;
import com.psddev.cms.tool.PageWriter;
import com.psddev.cms.tool.Search;
import com.psddev.cms.tool.ToolPageContext;
import com.psddev.dari.db.Query;
import com.psddev.dari.db.ObjectField;
import com.psddev.dari.db.ObjectFieldComparator;
import com.psddev.dari.db.ObjectType;
import com.psddev.dari.db.State;
import com.psddev.dari.util.ObjectUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public final class record_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;



// --- Logic ---

ToolPageContext wp = new ToolPageContext(pageContext);

State state = State.getInstance(request.getAttribute("object"));

ObjectField field = (ObjectField) request.getAttribute("field");
String fieldName = field.getInternalName();
Set<Object> fieldValue = (Set<Object>) state.getValue(fieldName);
if (fieldValue == null) {
    fieldValue = new LinkedHashSet<Object>();
}

List<ObjectType> validTypes = field.as(ToolUi.class).findDisplayTypes();
boolean isValueExternal = ToolUi.isValueExternal(field);

Collections.sort(validTypes, new ObjectFieldComparator("_label", false));

String inputName = (String) request.getAttribute("inputName");
String idName = inputName + ".id";
String typeIdName = inputName + ".typeId";
String publishDateName = inputName + ".publishDate";

if ((Boolean) request.getAttribute("isFormPost")) {
    if (!isValueExternal) {
        Map<UUID, Object> existing = new HashMap<UUID, Object>();

        for (Object item : fieldValue) {
            existing.put(State.getInstance(item).getId(), item);
        }

        fieldValue.clear();

        UUID[] ids = wp.uuidParams(idName);
        UUID[] typeIds = wp.uuidParams(typeIdName);
        Date[] publishDates = wp.dateParams(publishDateName);

        for (int i = 0, s = Math.min(Math.min(ids.length, typeIds.length), publishDates.length); i < s; ++ i) {
            Object item = existing.get(ids[i]);
            State itemState = State.getInstance(item);

            if (item != null) {
                itemState.setTypeId(typeIds[i]);

            } else {
                ObjectType type = ObjectType.getInstance(typeIds[i]);
                item = type.createObject(null);
                itemState = State.getInstance(item);
                itemState.setResolveInvisible(true);
                itemState.setId(ids[i]);
            }

            wp.updateUsingParameters(item);
            itemState.remove(Content.PUBLISH_DATE_FIELD);
            itemState.remove(Content.UPDATE_DATE_FIELD);
            fieldValue.add(item);

            if (field.isEmbedded() && !itemState.isNew()) {
                itemState.setId(null);
                itemState.setStatus(null);
            }
        }

    } else {
        fieldValue.clear();

        for (UUID id : wp.uuidParams(inputName)) {
            Object item = Query.fromAll().where("_id = ?", id).resolveInvisible().first();
            if (item != null) {
                fieldValue.add(item);
            }
        }
    }

    if (ToolUi.isFieldSorted(field)) {
        List<Object> sorted = new ArrayList<Object>(fieldValue);
        ObjectUtils.sort(sorted, false);
        fieldValue = new LinkedHashSet<Object>(sorted);
    }

    state.putValue(fieldName, fieldValue);
    return;

} else {
    if (ToolUi.isFieldSorted(field)) {
        List<Object> sorted = new ArrayList<Object>(fieldValue);
        ObjectUtils.sort(sorted, false);
        fieldValue = new LinkedHashSet<Object>(sorted);
    }
}

// --- Presentation ---


 if (!isValueExternal) { 
      out.write("\n");
      out.write("    <div class=\"inputLarge repeatableForm\">\n");
      out.write("        <ul>\n");
      out.write("            ");

            for (Object item : fieldValue) {
                State itemState = State.getInstance(item);
                ObjectType itemType = itemState.getType();
                Date itemPublishDate = itemState.as(Content.ObjectModification.class).getPublishDate();
                
      out.write("\n");
      out.write("                <li data-type=\"");
      out.print( wp.objectLabel(itemType) );
      out.write("\" data-label=\"");
      out.print( wp.objectLabel(item) );
      out.write("\">\n");
      out.write("                    <input name=\"");
      out.print( wp.h(idName) );
      out.write("\" type=\"hidden\" value=\"");
      out.print( itemState.getId() );
      out.write("\">\n");
      out.write("                    <input name=\"");
      out.print( wp.h(typeIdName) );
      out.write("\" type=\"hidden\" value=\"");
      out.print( itemType.getId() );
      out.write("\">\n");
      out.write("                    <input name=\"");
      out.print( wp.h(publishDateName) );
      out.write("\" type=\"hidden\" value=\"");
      out.print( wp.h(itemPublishDate != null ? itemPublishDate.getTime() : null) );
      out.write("\">\n");
      out.write("                    ");
 wp.writeFormFields(item); 
      out.write("\n");
      out.write("                </li>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("            ");
 for (ObjectType type : validTypes) { 
      out.write("\n");
      out.write("                <script type=\"text/template\">\n");
      out.write("                    <li data-type=\"");
      out.print( wp.objectLabel(type) );
      out.write("\">\n");
      out.write("                        <a href=\"");
      out.print( wp.cmsUrl("/content/repeatableObject.jsp", "inputName", inputName, "typeId", type.getId()) );
      out.write("\"></a>\n");
      out.write("                    </li>\n");
      out.write("                </script>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("\n");

} else {
    PageWriter writer = wp.getWriter();

    if (wp.isObjectSelectDropDown(field)) {
        ToolUi ui = field.as(ToolUi.class);
        String placeholder = ui.getPlaceholder();
        String dynamicPlaceholder = ui.getPlaceholderDynamicText();

        if (field.isRequired()) {
            if (ObjectUtils.isBlank(placeholder)) {
                placeholder = "(Required)";

            } else {
                placeholder += " (Required)";
            }
        }

        writer.start("div", "class", "inputSmall");
            List<?> items = wp.findDropDownItems(field, new Search(field));
            Collections.sort(items, new ObjectFieldComparator("_label", false));

            writer.start("select",
                    "multiple", "multiple",
                    "data-searchable", "true",
                    "placeholder", placeholder,
                    "data-dynamic-placeholder", dynamicPlaceholder,
                    "data-dynamic-field-name", field.getInternalName(),
                    "name", inputName);
                for (Object item : items) {
                    State itemState = State.getInstance(item);
                    writer.start("option",
                            "selected", fieldValue.contains(item) ? "selected" : null,
                            "value", itemState.getId());
                        writer.objectLabel(item);
                    writer.end();
                }
            writer.end();
        writer.end();

    } else {
        writer.start("div", "class", "inputSmall repeatableObjectId");
            writer.start("ul");
                if (fieldValue != null) {
                    for (Object item : fieldValue) {
                        writer.start("li");
                            wp.writeObjectSelect(field, item, "name", inputName);
                        writer.end();
                    }
                }
                writer.writeStart("script", "type", "text/template");
                    writer.start("li");
                        wp.writeObjectSelect(field, null, "name", inputName);
                    writer.end();
                writer.writeEnd();
            writer.end();
        writer.end();
    }
}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
