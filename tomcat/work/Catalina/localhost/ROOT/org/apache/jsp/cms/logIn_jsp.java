/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2016-01-13 15:51:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cms;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.psddev.cms.db.ToolAuthenticationPolicy;
import com.psddev.cms.db.ToolUser;
import com.psddev.cms.tool.CmsTool;
import com.psddev.cms.tool.AuthenticationFilter;
import com.psddev.cms.tool.ToolPageContext;
import com.psddev.dari.db.Query;
import com.psddev.dari.util.AuthenticationException;
import com.psddev.dari.util.AuthenticationPolicy;
import com.psddev.dari.util.HtmlWriter;
import com.psddev.dari.util.JspUtils;
import com.psddev.dari.util.ObjectUtils;
import com.psddev.dari.util.Settings;
import com.psddev.dari.util.StringUtils;
import com.psddev.dari.util.UrlBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.UUID;

public final class logIn_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


private Logger LOGGER = LoggerFactory.getLogger("logIn.jsp");

private void logAuthRequest(String context, String userId, String domain, String ipAddress, boolean status, boolean enabled) {
    if (enabled) {
        if (status) {
            LOGGER.info(context + " [userId:" + userId + ", status:success, domain:" + domain + ", ipAddress:"
                    + ipAddress + "]");
        } else {
            LOGGER.info(context + " [userId:" + userId + ", status:fail, domain:" + domain + ", ipAddress:"
                    + ipAddress + "]");
        }
    }
}

private static String getDomain(String siteUrl) {
    String domain = siteUrl;
    if (!ObjectUtils.isBlank(siteUrl)) {
        domain = siteUrl.replaceFirst("^(?i)(?:https?://)?(?:www\\.)?", "");
        int slashAt = domain.indexOf('/');

        if (slashAt > -1) {
            domain = domain.substring(0, slashAt);
        }

        int colonAt = domain.indexOf(':');

        if (colonAt > -1) {
            domain = domain.substring(0, colonAt);
        }
    }
    return domain;
}

private static String getIpAddress(String xForReqParam, String remoteAddrReqParam) {
    String ipAddress = xForReqParam;
    if (ipAddress == null) {
        ipAddress = remoteAddrReqParam;
    }
    return ipAddress;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');


// --- Logic ---

ToolPageContext wp = new ToolPageContext(pageContext);

if (wp.getUser() != null) {
    AuthenticationFilter.Static.logOut(response);
    response.sendRedirect(new UrlBuilder(request).
            currentPath().
            currentParameters().
            toString());
    return;
}

AuthenticationException authError = null;
String username = wp.param("username");
String returnPath = wp.param(AuthenticationFilter.RETURN_PATH_PARAMETER);
ToolUser user = ToolUser.Static.getByTotpToken(wp.param(String.class, "totpToken"));

if (wp.isFormPost()) {
    
    String siteUrl = Query.from(CmsTool.class).first().getDefaultSiteUrl();
    String domain = getDomain(siteUrl);
    String ipAddress = getIpAddress(request.getHeader("X-FORWARDED-FOR"), request.getRemoteAddr());
    boolean isAuthLogged = Settings.get(boolean.class, "cms/tool/isAuthenticationLogged");

    try {

        if (user != null) {
            if (!user.verifyTotp(wp.param(int.class, "totpCode"))) {
                throw new AuthenticationException("The code you've entered is either invalid or has already been used.");
            }

        } else {
            AuthenticationPolicy authPolicy = AuthenticationPolicy.Static.getInstance(Settings.get(String.class, "cms/tool/authenticationPolicy"));

            if (authPolicy == null) {
                authPolicy = new ToolAuthenticationPolicy();
            }

            user = (ToolUser) authPolicy.authenticate(username, wp.param(String.class, "password"));

            logAuthRequest("ToolAuthentication", username, domain, ipAddress, true, isAuthLogged);

            if (user.isTfaEnabled()) {
                String totpToken = UUID.randomUUID().toString();

                user.setTotpToken(totpToken);
                user.save();
                wp.redirect("", "totpToken", totpToken);
                return;
            }
        }

        if (user.isChangePasswordOnLogIn()) {
            String changePasswordToken = UUID.randomUUID().toString();
            user.setChangePasswordToken(changePasswordToken);
            user.save();
            wp.redirect("change-password.jsp", "changePasswordToken", changePasswordToken, AuthenticationFilter.RETURN_PATH_PARAMETER, returnPath);
            return;
        }

        if (user.getChangePasswordToken() != null) {
            user.setChangePasswordToken(null);
            user.save();
        }

        AuthenticationFilter.Static.logIn(request, response, user);

        if (!StringUtils.isBlank(returnPath)) {
            try {
                wp.redirect(new URL(JspUtils.getAbsoluteUrl(request, returnPath)).toString());
            } catch (MalformedURLException e) {
                wp.redirect("/");
            }
        } else {
            wp.redirect("/");
        }

        return;

    } catch (AuthenticationException error) {
        logAuthRequest("ToolAuthentication", username, domain, ipAddress, false, isAuthLogged);
        authError = error;
    }
}

// --- Presentation ---


 wp.include("/WEB-INF/header.jsp"); 
      out.write("\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write(".toolHeader {\n");
      out.write("    background-color: transparent;\n");
      out.write("    border-style: none;\n");
      out.write("    box-shadow: none;\n");
      out.write("}\n");
      out.write(".toolTitle {\n");
      out.write("    float: none;\n");
      out.write("    height: 100px;\n");
      out.write("    margin: 30px 0 0 0;\n");
      out.write("    text-align: center;\n");
      out.write("    width: auto;\n");
      out.write("}\n");
      out.write(".toolTitle a img {\n");
      out.write("    max-width: 390px;\n");
      out.write("}\n");
      out.write(".toolFooter {\n");
      out.write("    border-style: none;\n");
      out.write("    text-align: center;\n");
      out.write("}\n");
      out.write(".toolFooter .build {\n");
      out.write("    background-position: top center;\n");
      out.write("    text-align: center;\n");
      out.write("}\n");
      out.write(".widget {\n");
      out.write("    margin: 0 auto;\n");
      out.write("    width: 30em;\n");
      out.write("}\n");
      out.write("body {\n");
      out.write("    margin-top: 170px;\n");
      out.write("}\n");
      out.write("body.hasToolBroadcast {\n");
      out.write("    margin-top: 195px;\n");
      out.write("}\n");
      out.write(".inputContainer {\n");
      out.write("    background: transparent !important;\n");
      out.write("}\n");
      out.write(".buttons {\n");
      out.write("    border-top-style: none;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<div class=\"widget widget-logIn\">\n");
      out.write("    <h1>\n");
      out.write("        ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "title")) );
      out.write("\n");
      out.write("    </h1>\n");
      out.write("\n");
      out.write("    ");

    if (wp.param(boolean.class, "forced")) {
        wp.writeStart("div", "class", "message message-warning");
            wp.writeHtml(wp.localize("com.psddev.cms.tool.page.LogIn", "message.inactive"));
        wp.writeEnd();
    }

    if (authError != null) {
        new HtmlWriter(wp.getWriter()).object(authError);
    }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (!Query.from(ToolUser.class).hasMoreThan(0)) { 
      out.write("\n");
      out.write("        <div class=\"message message-info\">\n");
      out.write("            <p>");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "message.welcome")) );
      out.write("</p>\n");
      out.write("        </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <form action=\"");
      out.print( wp.url("", "forced", null) );
      out.write("\" method=\"post\">\n");
      out.write("        ");
 if (user == null) { 
      out.write("\n");
      out.write("            <div class=\"inputContainer\">\n");
      out.write("                <div class=\"inputLabel\">\n");
      out.write("                    <label for=\"");
      out.print( wp.createId() );
      out.write('"');
      out.write('>');
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "label.username")) );
      out.write("</label>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"inputSmall\">\n");
      out.write("                    <input class=\"autoFocus\" id=\"");
      out.print( wp.getId() );
      out.write("\" name=\"username\" type=\"text\" value=\"");
      out.print( wp.h(username) );
      out.write("\" placeholder=\"");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "placeholder.username")) );
      out.write("\">\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"inputContainer\">\n");
      out.write("                <div class=\"inputLabel\">\n");
      out.write("                    <label for=\"");
      out.print( wp.createId() );
      out.write("\">\n");
      out.write("                        ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "label.password")) );
      out.write("\n");
      out.write("                    </label>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"inputSmall\">\n");
      out.write("                    <input id=\"");
      out.print( wp.getId() );
      out.write("\" name=\"password\" type=\"password\" placeholder=\"");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "placeholder.password")) );
      out.write("\">\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("        ");
 } else { 
      out.write("\n");
      out.write("            <div class=\"inputContainer\">\n");
      out.write("                <div class=\"inputLabel\">\n");
      out.write("                    <label for=\"");
      out.print( wp.createId() );
      out.write("\">\n");
      out.write("                        ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "label.code")) );
      out.write("\n");
      out.write("                    </label>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"inputSmall\">\n");
      out.write("                    <input class=\"autoFocus\" id=\"");
      out.print( wp.getId() );
      out.write("\" name=\"totpCode\" type=\"text\" placeholder=\"");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "placeholder.code")) );
      out.write("\">\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("        <div class=\"buttons\">\n");
      out.write("            <button class=\"action action-logIn\">");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "action.login")) );
      out.write("</button>\n");
      out.write("            ");
 if (!StringUtils.isBlank(Settings.get(String.class, "cms/tool/forgotPasswordEmailSender")) && user == null) {
      out.write("\n");
      out.write("            <a href=\"");
      out.print( wp.url("forgot-password.jsp", AuthenticationFilter.RETURN_PATH_PARAMETER, returnPath) );
      out.write("\">\n");
      out.write("                ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.LogIn", "action.forgotPassword")) );
      out.write("\n");
      out.write("            </a>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("</div>\n");
      out.write("\n");
 wp.include("/WEB-INF/footer.jsp"); 
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
