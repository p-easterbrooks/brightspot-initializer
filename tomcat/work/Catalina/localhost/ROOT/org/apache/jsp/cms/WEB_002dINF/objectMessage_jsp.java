/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2016-01-13 16:35:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cms.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.psddev.cms.db.Content;
import com.psddev.cms.db.Draft;
import com.psddev.cms.db.History;
import com.psddev.cms.db.Schedule;
import com.psddev.cms.db.Template;
import com.psddev.cms.db.Trash;
import com.psddev.cms.db.Workflow;
import com.psddev.cms.db.WorkflowLog;
import com.psddev.cms.tool.ToolPageContext;
import com.psddev.dari.db.Database;
import com.psddev.dari.db.ObjectType;
import com.psddev.dari.db.Query;
import com.psddev.dari.db.State;
import com.psddev.dari.util.ObjectUtils;
import java.util.Date;
import java.util.List;
import org.joda.time.DateTime;
import com.google.common.collect.ImmutableMap;

public final class objectMessage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;



// --- Presentation ---

ToolPageContext wp = new ToolPageContext(pageContext);
Object object = request.getAttribute("object");
State state = State.getInstance(object);

if (wp.getOverlaidDraft(object) == null) {
    List<Object> contentUpdates = Query
            .fromAll()
            .and("com.psddev.cms.db.Draft/objectId = ?", state.getId())
            .sortDescending("cms.content.updateDate")
            .selectAll();

    if (!contentUpdates.isEmpty()) {
        wp.writeStart("div", "class", "message message-info");
        wp.writeStart("p");
        wp.writeObjectLabel(ObjectType.getInstance(Draft.class));
        wp.writeHtml(" Items:");
        wp.writeEnd();

        wp.writeStart("ul");
        for (Object contentUpdateObject : contentUpdates) {
            if (contentUpdateObject instanceof Draft) {
                Draft contentUpdate = (Draft) contentUpdateObject;
                String contentUpdateName = contentUpdate.getName();

                wp.writeStart("li");
                wp.writeStart("a", "href", wp.objectUrl(null, contentUpdate));

                if (!ObjectUtils.isBlank(contentUpdateName)) {
                    wp.writeHtml(contentUpdateName);
                    wp.writeHtml(" - ");
                }

                wp.writeHtml(wp.formatUserDateTime(contentUpdate.as(Content.ObjectModification.class).getUpdateDate()));
                wp.writeHtml(" by ");
                wp.writeObjectLabel(contentUpdate.getUpdateUser());
                wp.writeEnd();
                wp.writeEnd();
            }
        }
        wp.writeEnd();
        wp.writeEnd();
    }
}

List<Throwable> errors = wp.getErrors();
if (errors != null && errors.size() > 0) {
    wp.include("/WEB-INF/errors.jsp");
    return;
}

Trash deleted = Query.findById(Trash.class, wp.uuidParam("deleted"));
if (deleted != null) {
    wp.write("<div class=\"message message-warning\"><p>");
    wp.write("Deleted ", deleted.getDeleteDate());
    wp.write(" by ", wp.objectLabel(deleted.getDeleteUser()));
    wp.write(".<p></div>");
    return;
}

Draft draft = wp.getOverlaidDraft(object);
Content.ObjectModification contentData = draft != null
        ? draft.as(Content.ObjectModification.class)
        : state.as(Content.ObjectModification.class);

if (wp.getUser().equals(contentData.getUpdateUser())) {
    Date tenSecondsAgo = new DateTime(Database.Static.getDefault().now()).minusSeconds(10).toDate();
    Date updateDate = contentData.getUpdateDate();

    if (updateDate != null && updateDate.after(tenSecondsAgo)) {
        WorkflowLog log = Query.from(WorkflowLog.class)
                .and("objectId = ?", draft != null ? draft.getId() : state.getId())
                .and("date > ?", tenSecondsAgo.getTime())
                .sortDescending("date")
                .first();

        wp.write("<div class=\"message message-success\"><p>");
            if (log != null && !ObjectUtils.isBlank(log.getNewWorkflowState())) {
                wp.writeHtml(wp.localize(
                        "com.psddev.cms.tool.page.content.ObjectMessage",
                        ImmutableMap.of(
                                "state", log.getNewWorkflowState(),
                                "date", wp.formatUserDateTime(log.getDate())),
                        "message.transition"));

            } else {

                wp.writeHtml(wp.localize(
                        "com.psddev.cms.tool.page.content.ObjectMessage",
                        ImmutableMap.of("date", wp.formatUserDateTime(updateDate)),
                        draft != null || !state.isVisible() ? "message.saved" : "message.published"));
            }
        wp.write(".</p>");
        wp.write("</div>");

        return;
    }
}

Date saved = wp.dateParam("saved");
if (saved != null) {
    wp.write("<div class=\"message message-success\"><p>");
    wp.writeHtml(wp.localize(
            "com.psddev.cms.tool.page.content.ObjectMessage",
            ImmutableMap.of("date", saved),
            "message.saved"));
    wp.write(".</p></div>");
    return;
}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
