/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2016-01-13 17:03:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cms.WEB_002dINF.widget;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.psddev.cms.db.Content;
import com.psddev.cms.db.Directory;
import com.psddev.cms.db.Site;
import com.psddev.cms.db.ToolUser;
import com.psddev.cms.db.Workflow;
import com.psddev.cms.tool.JspWidget;
import com.psddev.cms.tool.ToolPageContext;
import com.psddev.dari.db.Query;
import com.psddev.dari.db.State;
import com.psddev.dari.util.CompactMap;
import com.psddev.dari.util.ObjectUtils;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public final class urlsNew_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;



ToolPageContext wp = new ToolPageContext(pageContext);
Object object = JspWidget.getOriginal(wp);
Object varied = JspWidget.getObject(wp);
Site site = wp.getSite();
State state = State.getInstance(object);

String namePrefix = state.getId() + "/directory.";
String automaticName = namePrefix + "automatic";
String pathName = namePrefix + "path";
String removeName = namePrefix + "remove";
String typeName = namePrefix + "type";
String siteIdName = namePrefix + "siteId";

Directory.Data dirData = state.as(Directory.Data.class);
Map<UUID, Site> sites = new CompactMap<UUID, Site>();

ToolUser user = wp.getUser();

Set<Site> userSites = new HashSet<Site>();
if (user != null) {
    userSites.addAll(user.findOtherAccessibleSites());
    userSites.add(user.getCurrentSite());
}


for (Site s : Query.
        from(Site.class).
        sortAscending("name").
        selectAll()) {

    if (userSites.contains(s)) {
        sites.put(s.getId(), s);
    }
}

boolean initialDraft = state.isNew() ||
        state.as(Content.ObjectModification.class).isDraft() ||
        state.as(Workflow.Data.class).getCurrentState() != null;

if (JspWidget.isUpdating(wp)) {
    dirData.setPathsMode(wp.param(boolean.class, automaticName) ? null : Directory.PathsMode.MANUAL);
    dirData.clearPaths();

    List<String> paths = wp.params(String.class, pathName);
    List<UUID> siteIds = wp.params(UUID.class, siteIdName);
    List<Directory.PathType> types = wp.params(Directory.PathType.class, typeName);

    for (int i = 0, size = Math.min(paths.size(), types.size()); i < size; i ++) {
        if (!wp.param(boolean.class, removeName + "." + i)) {
            dirData.addPath(i < siteIds.size() ? sites.get(siteIds.get(i)) : null, paths.get(i), types.get(i));
        }
    }

    // Automatically generate URLs if requested.
    if (initialDraft) {
        if (!Directory.PathsMode.MANUAL.equals(dirData.getPathsMode())) {
            Set<Directory.Path> oldPaths = new LinkedHashSet<Directory.Path>(dirData.getPaths());
            Set<String> oldRawPaths = new LinkedHashSet<String>(dirData.getRawPaths());

            for (Directory.Path path : State.getInstance(varied).as(Directory.ObjectModification.class).createPaths(site)) {
                dirData.addPath(path.getSite(), path.getPath(), path.getType());
            }

            Set<Directory.Path> newPaths = new LinkedHashSet<Directory.Path>(dirData.getPaths());
            Set<String> newRawPaths = new LinkedHashSet<String>(dirData.getRawPaths());

            newPaths.removeAll(oldPaths);
            newRawPaths.removeAll(oldRawPaths);
            state.getExtras().put("cms.newPaths", newPaths);
            dirData.setAutomaticRawPaths(newRawPaths);

        } else {
            dirData.setAutomaticRawPaths(null);
        }

    } else {
        if (!Directory.PathsMode.MANUAL.equals(dirData.getPathsMode())) {
            dirData.setPathsMode(Directory.PathsMode.MANUAL);
            dirData.setAutomaticRawPaths(null);

            for (Directory.Path path : State.getInstance(varied).as(Directory.ObjectModification.class).createPaths(site)) {
                dirData.addPath(path.getSite(), path.getPath(), path.getType());
            }
        }
    }

    return;
}

String automaticContainerId = wp.createId();
List<String> errors = state.getErrors(state.getField(Directory.PATHS_FIELD));

if (!ObjectUtils.isBlank(errors)) {
    wp.writeStart("div", "class", "message message-error");
        for (String error : errors) {
            wp.writeHtml(error);
        }
    wp.writeEnd();
}

if (initialDraft) {
    wp.writeStart("div", "class", "widget-urlsAutomatic");
        wp.writeStart("label");
            wp.writeElement("input",
                    "type", "checkbox",
                    "name", automaticName,
                    "value", "true",
                    "checked", Directory.PathsMode.MANUAL.equals(dirData.getPathsMode()) ? null : "checked");

            wp.writeHtml(" Generate Permalink?");
        wp.writeEnd();

        wp.writeStart("div", "id", automaticContainerId);
        wp.writeEnd();
    wp.writeEnd();

} else if (!Directory.PathsMode.MANUAL.equals(dirData.getPathsMode())) {
    wp.writeElement("input",
            "type", "hidden",
            "name", automaticName,
            "value", true);
}

Set<Directory.Path> paths = initialDraft ? dirData.getManualPaths() : dirData.getPaths();

if (!paths.isEmpty()) {
    int index = 0;

    wp.writeStart("ul");
        for (Directory.Path path : paths) {
            Site pathSite = path.getSite();
            String pathPath = path.getPath();
            String href = pathSite != null ? pathSite.getPrimaryUrl() + pathPath : pathPath;

            while (href.endsWith("*")) {
                href = href.substring(0, href.length() - 1);
            }

            wp.writeStart("li", "class", "widget-urlsItem");
                wp.writeElement("input",
                        "type", "hidden",
                        "id", wp.createId(),
                        "name", pathName,
                        "value", pathPath);

                wp.writeStart("div", "class", "widget-urlsItemLabel");
                    wp.writeStart("a", "href", href, "target", "_blank");
                        wp.writeHtml(pathPath);
                    wp.writeEnd();

                    wp.writeStart("label",
                            "class", "widget-urlsItemRemove");
                        wp.writeHtml(" ");

                        wp.writeElement("input",
                                "type", "checkbox",
                                "name", removeName + "." + index,
                                "value", "true");

                        wp.writeHtml(" Remove");
                    wp.writeEnd();
                wp.writeEnd();

                if (!sites.isEmpty()) {
                    wp.writeStart("select", "name", siteIdName);
                        if (user != null && user.hasPermission("site/global")) {
                            wp.writeStart("option", "value", "");
                                wp.writeHtml("Global");
                            wp.writeEnd();
                        }

                        for (Site s : sites.values()) {
                            wp.writeStart("option",
                                    "selected", s.equals(path.getSite()) ? "selected" : null,
                                    "value", s.getId());
                                wp.writeObjectLabel(s);
                            wp.writeEnd();
                        }
                    wp.writeEnd();

                    wp.writeHtml(" ");
                }

                wp.writeStart("select", "name", typeName);
                    for (Directory.PathType pathType : Directory.PathType.values()) {
                        wp.writeStart("option",
                                "selected", pathType.equals(path.getType()) ? "selected" : null,
                                "value", pathType.name());
                            wp.writeHtml(pathType);
                        wp.writeEnd();
                    }
                wp.writeEnd();
            wp.writeEnd();

            ++ index;
        }
    wp.writeEnd();
}

      out.write("\n");
      out.write("\n");
      out.write("<div class=\"repeatableInputs\">\n");
      out.write("    <ul>\n");
      out.write("        <script type=\"text/template\">\n");
      out.write("            <li class=\"widget-urlsItem\" data-type=\"URL\">\n");
      out.write("                <textarea class=\"widget-urlsItemLabel\" name=\"");
      out.print( wp.h(pathName) );
      out.write("\"></textarea>\n");
      out.write("\n");
      out.write("                ");

                if (!sites.isEmpty()) {
                    wp.writeStart("select", "name", siteIdName);
                        if (user != null && user.hasPermission("site/global")) {
                            wp.writeStart("option", "value", "");
                                wp.writeHtml("Global");
                            wp.writeEnd();
                        }

                        for (Site s : sites.values()) {
                            wp.writeStart("option", "value", s.getId(), "selected", s.equals(site) ? "selected" : null);
                                wp.writeObjectLabel(s);
                            wp.writeEnd();
                        }
                    wp.writeEnd();

                    wp.writeHtml(" ");
                }

                wp.writeStart("select", "name", typeName);
                    for (Directory.PathType pathType : Directory.PathType.values()) {
                        wp.writeStart("option", "value", pathType.name());
                            wp.writeHtml(pathType);
                        wp.writeEnd();
                    }
                wp.writeEnd();
                
      out.write("\n");
      out.write("            </li>\n");
      out.write("        </script>\n");
      out.write("    </ul>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    (function($, window, undefined) {\n");
      out.write("        var $automaticContainer = $('#");
      out.print( automaticContainerId );
      out.write("'),\n");
      out.write("                $form = $automaticContainer.closest('form');\n");
      out.write("\n");
      out.write("        $form.bind('cms-updateContentState', function(event, data) {\n");
      out.write("            $automaticContainer.html(data._urlWidgetHtml || '');\n");
      out.write("        });\n");
      out.write("    })(jQuery, window);\n");
      out.write("</script>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
