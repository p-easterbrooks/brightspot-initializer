/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2016-01-13 17:03:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cms.content;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.psddev.cms.db.Content;
import com.psddev.cms.db.ContentLock;
import com.psddev.cms.db.Directory;
import com.psddev.cms.db.Draft;
import com.psddev.cms.db.Guide;
import com.psddev.cms.db.GuidePage;
import com.psddev.cms.db.History;
import com.psddev.cms.db.Page;
import com.psddev.cms.db.PageFilter;
import com.psddev.cms.db.Renderer;
import com.psddev.cms.db.Schedule;
import com.psddev.cms.db.Site;
import com.psddev.cms.db.Template;
import com.psddev.cms.db.ToolUi;
import com.psddev.cms.db.ToolUser;
import com.psddev.cms.db.Variation;
import com.psddev.cms.db.Workflow;
import com.psddev.cms.db.WorkflowLog;
import com.psddev.cms.db.WorkflowState;
import com.psddev.cms.db.WorkflowTransition;
import com.psddev.cms.db.WorkStream;
import com.psddev.cms.tool.CmsTool;
import com.psddev.cms.tool.ToolPageContext;
import com.psddev.cms.tool.Widget;
import com.psddev.dari.db.ObjectField;
import com.psddev.dari.db.ObjectType;
import com.psddev.dari.db.Query;
import com.psddev.dari.db.Singleton;
import com.psddev.dari.db.State;
import com.psddev.dari.util.HtmlWriter;
import com.psddev.dari.util.JspUtils;
import com.psddev.dari.util.ObjectUtils;
import com.psddev.dari.util.StringUtils;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.joda.time.DateTime;
import com.google.common.collect.ImmutableMap;

public final class edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {



// Renders all the content widgets for the given position.
private static void renderWidgets(ToolPageContext wp, Object object, String position) throws Exception {

    State state = State.getInstance(object);
    List<Widget> widgets = null;
    for (List<Widget> item : wp.getTool().findWidgets(position)) {
        widgets = item;
        break;
    }

    if (!ObjectUtils.isBlank(widgets)) {
        wp.write("<div class=\"contentWidgets contentWidgets-");
        wp.write(wp.h(position));
        wp.write("\">");

        for (Widget widget : widgets) {
            if (wp.hasPermission(widget.getPermissionId())) {

                wp.write("<input type=\"hidden\" name=\"");
                wp.write(wp.h(state.getId()));
                wp.write("/_widget\" value=\"");
                wp.write(wp.h(widget.getInternalName()));
                wp.write("\">");

                String displayHtml;

                try {
                    displayHtml = widget.createDisplayHtml(wp, object);

                } catch (Exception ex) {
                    StringWriter sw = new StringWriter();
                    HtmlWriter hw = new HtmlWriter(sw);
                    hw.putAllStandardDefaults();
                    hw.start("pre", "class", "message message-error").object(ex).end();
                    displayHtml = sw.toString();
                }

                if (!ObjectUtils.isBlank(displayHtml)) {
                    wp.write(displayHtml);
                }
            }
        }
        wp.write("</div>");
    }
}



private enum Device {

    DESKTOP("Desktop", 1280),
    TABLET_LANDSCAPE("Tablet - Landscape", 1024),
    TABLET_PORTRAIT("Tablet - Portrait", 768),
    MOBILE_LANDSCAPE("Mobile - Landscape", 480),
    MOBILE_PORTRAIT("Mobile - Portrait", 320);

    public final String label;
    public final int width;

    private Device(String label, int width) {
        this.label = label;
        this.width = width;
    }

    @Override
    public String toString() {
        return label + " (" + width + ")";
    }
}

private static class Context {

    public String value;
    public Integer width;
    public String label;

    public Context(String value, Integer width, String label) {
        this.value = value;
        this.width = width;
        this.label = label;
    }
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;



// --- Logic ---

ToolPageContext wp = new ToolPageContext(pageContext);
if (wp.requireUser()) {
    return;
}

Object selected = wp.findOrReserve();
if (selected == null) {
    wp.writeHeader();
    wp.writeStart("div", "class", "message message-warning");
    wp.writeHtml(wp.localize(
            "com.psddev.cms.tool.page.content.Edit",
            ImmutableMap.of("queryString", request.getQueryString()),
            "message.missing"));
    wp.writeEnd();
    wp.writeFooter();
    return;
}

State state = State.getInstance(selected);
Site site = wp.getSite();

if (selected != null) {
    if (!(site == null || Site.Static.isObjectAccessible(site, selected))) {
        wp.writeHeader();
        wp.writeStart("div", "class", "message message-warning");
        wp.writeHtml(wp.localize(
                "com.psddev.cms.tool.page.content.Edit",
                ImmutableMap.of(
                        "typeLabel", wp.getTypeLabel(selected),
                        "objectLabel", wp.getObjectLabel(selected),
                        "siteName", site.getName()
                ),
                "message.notAccessible"));
        wp.writeEnd();
        wp.writeFooter();
        return;
    }
}

UUID variationId = wp.param(UUID.class, ToolPageContext.VARIATION_ID_PARAMETER);

if (site != null) {
    Variation defaultVariation = site.getDefaultVariation();

    if (defaultVariation != null && !defaultVariation.getId().equals(variationId)) {
        wp.redirect("", "variationId", defaultVariation.getId());
        return;
    }
}

Template template = null;
if (selected != null) {
    template = state.as(Template.ObjectModification.class).getDefault();
}

UUID newTypeId = wp.uuidParam("newTypeId");
if (newTypeId != null) {
    state.setTypeId(newTypeId);
}

Object editing = selected;
Object sectionContent = null;
if (selected instanceof Page) {
    sectionContent = Query.findById(Object.class, wp.uuidParam("contentId"));
    if (sectionContent != null) {
        editing = sectionContent;

        if (variationId != null) {
            State editingState = State.getInstance(editing);
            @SuppressWarnings("unchecked")
            Map<String, Object> variationValues = (Map<String, Object>) editingState.getValue("variations/" + variationId.toString());

            if (variationValues != null) {
                editingState.setValues(variationValues);
            }
        }
    }
}

Map<String, Object> editingOldValues = Draft.findOldValues(editing);
WorkStream workStream = Query.from(WorkStream.class).where("_id = ?", wp.param(UUID.class, "workStreamId")).first();

if (workStream != null) {

    Draft draft = wp.getOverlaidDraft(editing);
    Object workstreamObject = (draft != null) ? draft : editing;

    if (wp.param(boolean.class, "action-skipWorkStream")) {
        workStream.skip(wp.getUser(), workstreamObject);
        wp.redirect("", "action-skipWorkStream", null);
        return;

    } else if (wp.param(boolean.class, "action-stopWorkStream")) {
        workStream.stop(wp.getUser());
        wp.redirect("/", "reason", "stop-work-stream");
        return;
    }

    State.getInstance(workstreamObject).as(WorkStream.Data.class).complete(workStream, wp.getUser());
}

if (wp.tryDelete(editing) ||
        wp.tryNewDraft(editing) ||
        wp.tryDraft(editing) ||
        wp.tryPublish(editing) ||
        wp.tryRestore(editing) ||
        wp.tryTrash(editing) ||
        wp.tryMerge(editing) ||
        wp.tryWorkflow(editing)) {
    return;
}

Object copy = Query.findById(Object.class, wp.uuidParam("copyId"));
if (copy != null) {
    State editingState = State.getInstance(editing);
    editingState.setValues(State.getInstance(copy).getSimpleValues());
    editingState.setId(null);
    editingState.as(Directory.ObjectModification.class).clearPaths();
    for (Site consumer : editingState.as(Site.ObjectModification.class).getConsumers()) {
        editingState.as(Directory.ObjectModification.class).clearSitePaths(consumer);
    }
    editingState.as(Site.ObjectModification.class).setOwner(site);
}

// Directory directory = Query.findById(Directory.class, wp.uuidParam("directoryId"));
History history = wp.getOverlaidHistory(editing);
Draft draft = wp.getOverlaidDraft(editing);
Set<ObjectType> compatibleTypes = ToolUi.getCompatibleTypes(State.getInstance(editing).getType());
State editingState = State.getInstance(editing);
ToolUser user = wp.getUser();
ContentLock contentLock = null;
boolean lockedOut = false;
boolean editAnyway = wp.param(boolean.class, "editAnyway");
boolean optInLock = wp.param(boolean.class, "lock");

if (!wp.getCmsTool().isDisableContentLocking()) {
    if (wp.getCmsTool().isOptInContentLocking()) {
        if (optInLock && wp.hasPermission("type/" + editingState.getTypeId() + "/write")) {
            contentLock = ContentLock.Static.lock(editing, null, user);
            lockedOut = !user.equals(contentLock.getOwner());

        } else {
            contentLock = ContentLock.Static.findLock(editing, null);
            lockedOut = contentLock != null && !user.equals(contentLock.getOwner());
        }

    } else if (wp.hasPermission("type/" + editingState.getTypeId() + "/write")) {
        contentLock = ContentLock.Static.lock(editing, null, user);
        lockedOut = !user.equals(contentLock.getOwner());
    }
}

// --- Presentation ---

Content.ObjectModification contentData = editingState.as(Content.ObjectModification.class);
Object oldObject = Query.fromAll().where("_id = ?", editingState.getId()).noCache().first();
boolean visible = false;

if (oldObject != null) {
    visible = State.getInstance(oldObject).isVisible();
}


      out.write('\n');

wp.writeHeader(editingState.getType() != null ? editingState.getType().getLabel() : null);

      out.write("\n");
      out.write("<div class=\"content-edit\">\n");


    String search = wp.param(String.class, "search");

    if (search != null) {
        wp.writeStart("div", "class", "frame");
            wp.writeStart("a", "href", wp.cmsUrl("/searchCarousel", "id", editingState.getId(), "search", search));
            wp.writeEnd();
        wp.writeEnd();
    }

      out.write("\n");
      out.write("    <form class=\"contentForm contentLock\"\n");
      out.write("            method=\"post\"\n");
      out.write("            enctype=\"multipart/form-data\"\n");
      out.write("            action=\"");
      out.print( wp.objectUrl("", selected,
                    "action-delete", null,
                    "action-draft", null,
                    "action-publish", null,
                    "action-restore", null,
                    "action-save", null,
                    "action-trash", null,
                    "published", null) );
      out.write("\"\n");
      out.write("            autocomplete=\"off\"\n");
      out.write("            data-rtc-content-id=\"");
      out.print( draft != null ? draft.getId() : editingState.getId() );
      out.write("\"\n");
      out.write("            data-new=\"");
      out.print( State.getInstance(editing).isNew() );
      out.write("\"\n");
      out.write("            data-o-id=\"");
      out.print( State.getInstance(selected).getId() );
      out.write("\"\n");
      out.write("            data-o-label=\"");
      out.print( wp.h(State.getInstance(selected).getLabel()) );
      out.write("\"\n");
      out.write("            data-o-preview=\"");
      out.print( wp.h(wp.getPreviewThumbnailUrl(selected)) );
      out.write("\"\n");
      out.write("            data-content-locked-out=\"");
      out.print( lockedOut && !editAnyway );
      out.write("\"\n");
      out.write("            data-content-id=\"");
      out.print( State.getInstance(editing).getId() );
      out.write("\">\n");
      out.write("\n");
      out.write("        <input type=\"hidden\" name=\"");
      out.print( editingState.getId() );
      out.write("/oldValues\" value=\"");
      out.print( wp.h(ObjectUtils.toJson(editingOldValues)) );
      out.write("\">\n");
      out.write("\n");
      out.write("        <div class=\"contentForm-main\">\n");
      out.write("            <div class=\"widget widget-content\">\n");
      out.write("                <h1 class=\"breadcrumbs\">");


                    wp.writeStart("span", "class", "breadcrumbItem icon icon-object");
                        if (state.isNew()) {
                            wp.writeHtml("New");

                        } else {
                            if (draft != null) {
                                wp.writeObjectLabel(ObjectType.getInstance(Draft.class));

                                String draftName = draft.getName();

                                if (!ObjectUtils.isBlank(draftName)) {
                                    wp.writeHtml(" (");
                                    wp.writeHtml(draftName);
                                    wp.writeHtml(")");
                                }

                                wp.writeHtml(" for");

                                if (!visible) {
                                    wp.writeHtml(" Initial Draft of");
                                }

                            } else if (!visible) {
                                wp.writeHtml("Initial Draft of");

                            } else {
                                wp.writeHtml("Edit");
                            }
                        }

                        wp.writeHtml(" ");

                        if (compatibleTypes.size() < 2) {
                            wp.write(wp.objectLabel(state.getType()));

                        } else {
                            wp.write("<select name=\"newTypeId\">");
                                for (ObjectType type : compatibleTypes) {
                                    wp.write("<option");
                                    wp.write(state.getType().equals(type) ? " selected" : "");
                                    wp.write(" value=\"");
                                    wp.write(type.getId());
                                    wp.write("\">");
                                    wp.write(wp.objectLabel(type));
                                    wp.write("</option>");
                                }
                            wp.write("</select>");
                        }

                        wp.write(": " );
                        wp.write(wp.getObjectLabelOrDefault(editing, "<em>" + wp.localize(null, "label.untitled") + "</em>"));
                    wp.writeEnd();

                    if (selected instanceof Page &&
                            ((Page) selected).getLayout() != null) {
                        wp.writeStart("span", "class", "breadcrumbItem");
                            wp.write("<a class=\"icon icon-object-template\" href=\"");
                            wp.write(wp.returnableUrl("/content/editableSections.jsp", "id", State.getInstance(selected).getId()));
                            wp.write("\" target=\"contentPageSections-");
                            wp.write(state.getId());
                            wp.write("\">");
                                if (sectionContent != null) {
                                    wp.write(wp.objectLabel(State.getInstance(editing).getType()));
                                } else {
                                    wp.write("Layout");
                                }
                            wp.write("</a>");
                        wp.writeEnd();
                    }

                    wp.include("/WEB-INF/objectVariation.jsp", "object", editing);
                
      out.write("</h1>\n");
      out.write("\n");
      out.write("                <div class=\"widgetControls\">\n");
      out.write("                    <a class=\"icon icon-action-edit widgetControlsEditInFull\" target=\"_blank\" href=\"");
      out.print( wp.url("") );
      out.write("\">\n");
      out.write("                        ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.editFull")));
      out.write("\n");
      out.write("                    </a>\n");
      out.write("                    ");
 if (wp.getCmsTool().isEnableAbTesting()) { 
      out.write("\n");
      out.write("                        <a class=\"icon icon-beaker\" href=\"");
      out.print( wp.url("", "ab", !wp.param(boolean.class, "ab")) );
      out.write("\">A/B</a>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                    ");

                    GuidePage guide = Guide.Static.getPageTypeProductionGuide(state.getType());
                    if (guide != null && guide.getDescription() != null && !guide.getDescription().isEmpty()) {
                        wp.write("<a class=\"icon icon-object-guide\" target=\"guideType\" href=\"", wp.objectUrl("/content/guideType.jsp", selected, "pageGuideId", guide.getId(),  "popup", true), "\">PG</a>");
                    }
                    
      out.write("\n");
      out.write("                </div>\n");
      out.write("\n");
      out.write("                ");
 if (!State.getInstance(editing).isNew() &&
                        !(editing instanceof com.psddev.dari.db.Singleton)) { 
      out.write("\n");
      out.write("                    <div class=\"widget-contentCreate\">\n");
      out.write("                        <div class=\"action action-create\">\n");
      out.write("                            ");
      out.print( wp.h(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.new")));
      out.write("\n");
      out.write("                        </div>\n");
      out.write("                        <ul>\n");
      out.write("                            <li>\n");
      out.write("                                <a class=\"action action-create\" href=\"");
      out.print( wp.url("/content/edit.jsp",
                                    "typeId", State.getInstance(editing).getTypeId(),
                                    "templateId", template != null ? template.getId() : null));
      out.write("\">\n");
      out.write("                                    ");
      out.print( wp.h(wp.localize(
                                            editingState.getType(),
                                            "action.newType")));
      out.write("\n");
      out.write("                                </a>\n");
      out.write("                            </li>\n");
      out.write("                            <li>\n");
      out.write("                                <a class=\"action action-copy\" href=\"");
      out.print( wp.url("/content/edit.jsp",
                                    "typeId", State.getInstance(editing).getTypeId(),
                                    "templateId", template != null ? template.getId() : null,
                                    "copyId", State.getInstance(editing).getId())
                                    );
      out.write("\" target=\"_top\">\n");
      out.write("                                    ");
      out.print( wp.h(wp.localize(
                                            editingState.getType(),
                                            "action.copy")));
      out.write("\n");
      out.write("                                </a>\n");
      out.write("                            </li>\n");
      out.write("                        </ul>\n");
      out.write("                    </div>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("                ");
 if (sectionContent != null) { 
      out.write("\n");
      out.write("                    <p><a class=\"icon icon-arrow-left\" href=\"");
      out.print( wp.url("", "contentId", null) );
      out.write("\">Back to Layout</a></p>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("                ");

                wp.include("/WEB-INF/objectMessage.jsp", "object", editing);

                Object compareObject = null;

                if (wp.param(boolean.class, "compare")) {
                    compareObject = user.createCompareObject();
                }

                if (compareObject != null) {
                    wp.writeStart("div", "class", "message message-info");
                        wp.writeStart("a",
                                "href", wp.url("", "compare", null));
                            wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.stopCompare"));
                        wp.writeEnd();
                    wp.writeEnd();

                    wp.writeStart("div", "class", "contentDiff");
                        wp.writeStart("div", "class", "contentDiffOld contentDiffLeft");
                            wp.writeStart("h2");
                            wp.writeObjectLabel(compareObject);
                            wp.writeEnd();
                            wp.writeSomeFormFields(compareObject, true, null, null);
                        wp.writeEnd();

                        try {
                            wp.disableFormFields();

                            wp.writeStart("div", "class", "contentDiffCurrent contentDiffRight");
                                wp.writeStart("h2");
                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "subtitle.current"));
                                wp.writeEnd();
                                wp.writeSomeFormFields(editing, true, null, null);
                            wp.writeEnd();

                        } finally {
                            wp.enableFormFields();
                        }
                    wp.writeEnd();

                } else if (history != null || draft != null) {
                    State original = State.getInstance(Query.
                            from(Object.class).
                            where("_id = ?", editing).
                            noCache().
                            first());

                    if (original != null) {
                        wp.writeStart("div", "class", "contentDiff");
                            if (history != null) {
                                wp.writeStart("div", "class", "contentDiffOld contentDiffLeft");
                                    wp.writeStart("h2");
                                        wp.writeObjectLabel(ObjectType.getInstance(History.class));
                                    wp.writeEnd();
                                    wp.writeSomeFormFields(editing, true, null, null);
                                wp.writeEnd();
                            }

                            try {
                                wp.disableFormFields();

                                wp.writeStart("div", "class", "contentDiffCurrent " + (history != null ? "contentDiffRight" : "contentDiffLeft"));
                                    wp.writeStart("h2");
                                        wp.writeHtml(wp.localize(
                                                "com.psddev.cms.tool.page.content.Edit",
                                                !visible ? "subtitle.initialDraft" : "subtitle.live"));
                                    wp.writeEnd();
                                    wp.writeSomeFormFields(original.getOriginalObject(), true, null, null);
                                wp.writeEnd();

                            } finally {
                                wp.enableFormFields();
                            }

                            if (draft != null) {
                                wp.writeStart("div", "class", "contentDiffNew contentDiffRight");
                                    wp.writeStart("h2");
                                        wp.writeObjectLabel(ObjectType.getInstance(Draft.class));
                                    wp.writeEnd();
                                    wp.writeSomeFormFields(editing, true, null, null);
                                wp.writeEnd();
                            }
                        wp.writeEnd();

                    } else {
                        wp.writeSomeFormFields(editing, true, null, null);
                    }

                } else {
                    wp.writeSomeFormFields(editing, true, null, null);
                }
                
      out.write("\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            ");
 renderWidgets(wp, editing, CmsTool.CONTENT_BOTTOM_WIDGET_POSITION); 
      out.write("\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <div class=\"contentForm-aside\">\n");
      out.write("            <div class=\"widget widget-publishing\">\n");
      out.write("                <h1 class=\"icon icon-action-publish\">");
      out.print( wp.h(wp.localize(editingState.getType(), "action.publish")) );
      out.write("</h1>\n");
      out.write("\n");
      out.write("                ");

                wp.writeStart("div", "class", "widget-controls");
                    if (!wp.getCmsTool().isDisableContentLocking() && !lockedOut && wp.getCmsTool().isOptInContentLocking()) {
                        wp.writeStart("a",
                                "class", "icon icon-only icon-" + (optInLock ? "lock" : "unlock"),
                                "href", wp.url("", "lock", !optInLock));
                            wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.lock"));
                        wp.writeEnd();
                    }

                    wp.writeStart("a",
                            "class", "widget-publishing-tools",
                            "href", wp.objectUrl("/contentTools", editing, "returnUrl", wp.url("")),
                            "target", "contentTools");
                        wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.tools"));
                    wp.writeEnd();
                wp.writeEnd();

                if (workStream != null) {
                    long skipped = workStream.countSkipped(user);
                    long complete = workStream.countComplete();
                    long incomplete = workStream.countIncomplete() - skipped;
                    long total = complete + incomplete + skipped;

                    wp.writeStart("div",
                            "class", "block",
                            "style", wp.cssString(
                                    "border-bottom", "1px solid #bbb",
                                    "padding-bottom", "5px"));
                        wp.writeStart("a",
                                "href", wp.url("/workStreamUsers", "id", workStream.getId()),
                                "target", "workStream");
                            wp.writeHtml(workStream.getUsers().size() - 1);
                            wp.writeHtml(" others");
                        wp.writeEnd();

                        wp.writeHtml(" working on ");

                        wp.writeStart("a",
                                "href", wp.objectUrl("/content/editWorkStream", workStream),
                                "target", "workStream");
                            wp.writeObjectLabel(workStream);
                        wp.writeEnd();

                        wp.writeHtml(" with you");

                        wp.writeStart("div", "class", "progress", "style", "margin: 5px 0;");
                            wp.writeStart("div", "class", "progressBar", "style", "width:" + ((total - incomplete) * 100.0 / total) + "%");
                            wp.writeEnd();

                            wp.writeStart("strong");
                                wp.writeHtml(incomplete);
                            wp.writeEnd();

                            wp.writeHtml(" of ");

                            wp.writeStart("strong");
                                wp.writeHtml(total);
                            wp.writeEnd();

                            wp.writeHtml(" left ");

                            if (complete > 0L || skipped > 0L) {
                                wp.writeHtml("(");
                            }

                            if (complete > 0L) {
                                wp.writeStart("strong");
                                    wp.writeHtml(complete);
                                wp.writeEnd();

                                wp.writeHtml(" complete");

                                if (skipped > 0L) {
                                    wp.writeHtml(", ");
                                }
                            }

                            if (skipped > 0L) {
                                wp.writeStart("strong");
                                    wp.writeHtml(skipped);
                                wp.writeEnd();

                                wp.writeHtml(" skipped");
                            }

                            if (complete > 0L || skipped > 0L) {
                                wp.writeHtml(")");
                            }

                        wp.writeEnd();

                        wp.writeStart("ul", "class", "piped");
                            wp.writeStart("li");
                                wp.writeStart("a",
                                        "class", "icon icon-step-forward",
                                        "href", wp.url("", "action-skipWorkStream", "true"));
                                    wp.writeHtml("Skip");
                                wp.writeEnd();
                            wp.writeEnd();

                            wp.writeStart("li");
                                wp.writeStart("a",
                                        "class", "icon icon-stop",
                                        "href", wp.url("", "action-stopWorkStream", "true"));
                                    wp.writeHtml("Stop");
                                wp.writeEnd();
                            wp.writeEnd();
                        wp.writeEnd();
                    wp.writeEnd();
                }

                boolean isWritable = wp.hasPermission("type/" + editingState.getTypeId() + "/write") && !editingState.getType().as(ToolUi.class).isReadOnly();
                boolean isDraft = !editingState.isNew() && (contentData.isDraft() || draft != null);
                boolean isHistory = history != null;
                boolean isTrash = contentData.isTrash();
                Schedule schedule = draft != null ? draft.getSchedule() : null;

                if (isWritable) {

                    // Message and actions if the content is a draft.
                    if (isDraft) {
                        Content.ObjectModification draftContentData = State.
                                getInstance(draft != null ? draft : editing).
                                as(Content.ObjectModification.class);

                        wp.writeStart("div", "class", "message message-warning");
                            wp.writeStart("p");
                                if (draft != null) {
                                    wp.writeObjectLabel(ObjectType.getInstance(Draft.class));

                                    String draftName = draft.getName();

                                    if (!ObjectUtils.isBlank(draftName)) {
                                        wp.writeHtml(" (");
                                        wp.writeHtml(draftName);
                                        wp.writeHtml(")");
                                    }

                                } else {
                                    wp.writeHtml("Initial Draft");
                                }

                                wp.writeHtml(" last saved ");
                                wp.writeHtml(wp.formatUserDateTime(draftContentData.getUpdateDate()));
                                wp.writeHtml(" by ");
                                wp.writeObjectLabel(draftContentData.getUpdateUser());
                                wp.writeHtml(".");
                            wp.writeEnd();

                            if (schedule != null) {
                                Date triggerDate = schedule.getTriggerDate();
                                ToolUser triggerUser = schedule.getTriggerUser();

                                if (triggerDate != null || triggerUser != null) {
                                    wp.writeStart("p");
                                        wp.writeHtml(" Scheduled to be published");

                                        if (triggerDate != null) {
                                            wp.writeHtml(" ");
                                            wp.writeHtml(wp.formatUserDateTime(triggerDate));
                                        }

                                        if (triggerUser != null) {
                                            wp.writeHtml(" by ");
                                            wp.writeObjectLabel(triggerUser);
                                        }

                                        wp.writeHtml(".");
                                    wp.writeEnd();
                                }
                            }

                            wp.writeStart("div", "class", "actions");
                                if (draft != null) {
                                    wp.writeStart("a",
                                            "class", "icon icon-action-edit",
                                            "href", wp.url("", "draftId", null));
                                        wp.writeHtml("Back to ");
                                        wp.writeHtml(!visible ? "Initial Draft" : "Live");
                                    wp.writeEnd();
                                }

                                wp.writeStart("button",
                                        "class", "link icon icon-action-save",
                                        "name", "action-draft",
                                        "value", "true");
                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.save"));
                                wp.writeEnd();

                                wp.writeStart("button",
                                        "class", "link icon icon-action-delete",
                                        "name", "action-delete",
                                        "value", "true");
                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.delete"));
                                wp.writeEnd();
                            wp.writeEnd();
                        wp.writeEnd();

                    // Message and actions if the content is a past revision.
                    } else if (isHistory) {
                        String historyName = history.getName();
                        boolean hasHistoryName = !ObjectUtils.isBlank(historyName);

                        wp.writeStart("div", "class", "message message-warning");
                            wp.writeStart("p");
                                if (hasHistoryName) {
                                    wp.writeHtml(historyName);
                                    wp.writeHtml(" - ");
                                }

                                wp.writeHtml("Past revision saved ");
                                wp.writeHtml(wp.formatUserDateTime(history.getUpdateDate()));
                                wp.writeHtml(" by ");
                                wp.writeObjectLabel(history.getUpdateUser());
                                wp.writeHtml(".");
                            wp.writeEnd();

                            wp.writeStart("div", "class", "actions");
                                wp.writeStart("a",
                                        "class", "icon icon-action-edit",
                                        "href", wp.url("", "historyId", null));
                                    wp.writeHtml("Live");
                                wp.writeEnd();

                                wp.writeHtml(" ");

                                wp.writeStart("a",
                                        "class", "icon icon-object-history",
                                        "href", wp.url("/historyEdit", "id", history.getId()),
                                        "target", "historyEdit");
                                    wp.writeHtml(hasHistoryName ? "Rename" : "Name");
                                    wp.writeHtml(" Revision");
                                wp.writeEnd();
                            wp.writeEnd();
                        wp.writeEnd();

                    // Message and actions if the content is a trash.
                    } else if (isTrash) {
                        wp.writeTrashMessage(editing);
                    }

                    if (lockedOut) {
                        wp.writeStart("div", "class", "message message-warning");
                            wp.writeStart("p");
                                wp.writeHtml(editAnyway ? "Ignoring lock by " : "Locked by ");
                                wp.writeObjectLabel(contentLock.getOwner());
                                wp.writeHtml(" since ");
                                wp.writeHtml(wp.formatUserDateTime(contentLock.getCreateDate()));
                                wp.writeHtml(".");
                            wp.writeEnd();

                            if (!editAnyway && !wp.getCmsTool().isOptInContentLocking()) {
                                wp.writeStart("div", "class", "actions");
                                    wp.writeStart("a",
                                            "class", "icon icon-unlock",
                                            "href", wp.url("", "editAnyway", true));
                                        wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.ignoreLock"));
                                    wp.writeEnd();
                                wp.writeEnd();
                            }
                        wp.writeEnd();

                    } else {
                        
      out.write("<script type=\"text/javascript\">\n");
      out.write("                            require([ 'content/lock' ], function(lock) {\n");
      out.write("                                var unlocked = false;\n");
      out.write("\n");
      out.write("                                setInterval(function() {\n");
      out.write("                                    if (!unlocked) {\n");
      out.write("                                        lock.lock('");
      out.print( editingState.getId() );
      out.write("');\n");
      out.write("                                    }\n");
      out.write("                                }, 1000);\n");
      out.write("\n");
      out.write("                                $(window).bind('beforeunload', function() {\n");
      out.write("                                    unlocked = true;\n");
      out.write("\n");
      out.write("                                    lock.unlock('");
      out.print( editingState.getId() );
      out.write("');\n");
      out.write("                                });\n");
      out.write("                            });\n");
      out.write("                        </script>");

                    }

                    if (!lockedOut || editAnyway) {

                        // Workflow actions.
                        if (!isTrash &&
                                (editingState.isNew() ||
                                !editingState.isVisible() ||
                                draft != null ||
                                editingState.as(Workflow.Data.class).getCurrentState() != null)) {

                            Workflow workflow = Query
                                    .from(Workflow.class)
                                    .and("sites = ?", site)
                                    .and("contentTypes = ?", editingState.getType())
                                    .first();

                            if (workflow == null) {
                                workflow = Query
                                        .from(Workflow.class)
                                        .and("sites = missing")
                                        .and("contentTypes = ?", editingState.getType())
                                        .first();
                            }

                            if (workflow != null) {
                                State workflowParentState = draft != null ? draft.getState() : editingState;
                                Workflow.Data workflowData = workflowParentState.as(Workflow.Data.class);
                                String currentState = workflowData.getCurrentState();
                                Map<String, String> transitionNames = new LinkedHashMap<String, String>();

                                for (Map.Entry<String, WorkflowTransition> entry : workflow.getTransitionsFrom(currentState).entrySet()) {
                                    String transitionName = entry.getKey();

                                    if (wp.hasPermission("type/" + editingState.getTypeId() + "/" + transitionName)) {
                                        transitionNames.put(transitionName, entry.getValue().getDisplayName());
                                    }
                                }

                                if (currentState != null || !transitionNames.isEmpty()) {
                                    WorkflowLog log = Query.
                                            from(WorkflowLog.class).
                                            where("objectId = ?", workflowParentState.getId()).
                                            sortDescending("date").
                                            first();

                                    wp.writeStart("div", "class", "widget-publishingWorkflow");
                                        if (!ObjectUtils.isBlank(currentState)) {
                                            String workflowStateDisplayName = currentState;

                                            for (WorkflowState s : workflow.getStates()) {
                                                if (ObjectUtils.equals(s.getName(), currentState)) {
                                                    workflowStateDisplayName = s.getDisplayName();
                                                    break;
                                                }
                                            }

                                            wp.writeStart("div", "class", "widget-publishingWorkflowComment");
                                                wp.writeStart("div", "class", "message message-warning");
                                                wp.writeStart("span", "class", "visibilityLabel widget-publishingWorkflowState");
                                                    wp.writeHtml(workflowStateDisplayName);
                                                wp.writeEnd();

                                                if (log != null) {
                                                    String comment = log.getComment();

                                                    wp.writeHtml(" ");
                                                    wp.writeStart("a",
                                                            "target", "workflowLogs",
                                                            "href", wp.cmsUrl("/workflowLogs", "objectId", workflowParentState.getId()));
                                                        if (ObjectUtils.isBlank(comment)) {
                                                            wp.writeHtml("by ");

                                                        } else {
                                                            wp.writeStart("q");
                                                                wp.writeHtml(comment);
                                                            wp.writeEnd();
                                                            wp.writeHtml(" said ");
                                                        }

                                                        wp.writeHtml(log.getUserName());
                                                        wp.writeHtml(" at ");
                                                        wp.writeHtml(wp.formatUserDateTime(log.getDate()));
                                                    wp.writeEnd();
                                                }

                                                if (draft == null
                                                        && (wp.hasPermission("type/" + editingState.getTypeId() + "/workflow.saveAllowed." + currentState)
                                                        || workflow.getTransitionsTo(currentState)
                                                                .keySet()
                                                                .stream()
                                                                .filter(name -> wp.hasPermission("type/" + editingState.getTypeId() + "/" + name))
                                                                .findFirst()
                                                                .isPresent())) {
                                                    wp.writeStart("div", "class", "actions");
                                                        wp.writeStart("button",
                                                                "class", "link icon icon-action-save",
                                                                "name", "action-draft",
                                                                "value", "true");
                                                            wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.save"));
                                                        wp.writeEnd();
                                                    wp.writeEnd();
                                                }
                                                wp.writeEnd();
                                            wp.writeEnd();
                                        }

                                        if (!transitionNames.isEmpty()) {
                                            WorkflowLog newLog = new WorkflowLog();

                                            if (log != null) {
                                                for (ObjectField field : ObjectType.getInstance(WorkflowLog.class).getFields()) {
                                                    if (field.as(WorkflowLog.FieldData.class).isPersistent()) {
                                                        String name = field.getInternalName();

                                                        newLog.getState().put(name, log.getState().get(name));
                                                    }
                                                }
                                            }

                                            wp.writeStart("div", "class", "widget-publishingWorkflowLog");
                                                wp.writeElement("input",
                                                        "type", "hidden",
                                                        "name", "workflowLogId",
                                                        "value", newLog.getId());

                                                wp.writeFormFields(newLog);
                                            wp.writeEnd();

                                            if (!visible
                                                    && draft != null
                                                    && workflow.getTransitionsTo(editingState.as(Workflow.Data.class).getCurrentState())
                                                            .keySet()
                                                            .stream()
                                                            .filter(name -> wp.hasPermission("type/" + editingState.getTypeId() + "/" + name))
                                                            .findFirst()
                                                            .isPresent()) {
                                                wp.writeStart("button",
                                                        "name", "action-merge",
                                                        "value", "true");
                                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.merge"));
                                                wp.writeEnd();
                                            }

                                            for (Map.Entry<String, String> entry : transitionNames.entrySet()) {
                                                wp.writeStart("button",
                                                        "name", "action-workflow",
                                                        "value", entry.getKey());
                                                    wp.writeHtml(entry.getValue());
                                                wp.writeEnd();
                                            }
                                        }
                                    wp.writeEnd();
                                }
                            }
                        }

                        // Publish and trash buttons.
                        if (!wp.hasPermission("type/" + editingState.getTypeId() + "/publish")) {
                            /*
                            wp.write("<div class=\"message message-warning\"><p>You cannot edit this ");
                            wp.write(wp.typeLabel(state));
                            wp.write("!</p></div>");
                            */

                        } else if (!isTrash) {
                            wp.writeStart("div", "class", "widget-publishingPublish");
                                if (wp.getUser().getCurrentSchedule() == null) {
                                    if (!contentData.isDraft() && schedule != null) {
                                        boolean newSchedule = wp.param(boolean.class, "newSchedule");

                                        wp.writeStart("div", "style", wp.cssString("margin-bottom", "5px"));
                                            wp.writeStart("select", "name", "newSchedule");
                                                wp.writeStart("option",
                                                        "selected", newSchedule ? null : "selected",
                                                        "value", "");
                                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "option.updateExistingSchedule"));
                                                wp.writeEnd();

                                                wp.writeStart("option",
                                                        "selected", newSchedule ? "selected" : null,
                                                        "value", "true");
                                                    wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "option.createNewSchedule"));
                                                wp.writeEnd();
                                            wp.writeEnd();
                                        wp.writeEnd();
                                    }

                                    DateTime publishDate;

                                    if (schedule != null) {
                                        publishDate = wp.toUserDateTime(schedule.getTriggerDate());

                                    } else {
                                        publishDate = wp.param(DateTime.class, "publishDate");

                                        if (publishDate == null &&
                                                (isDraft ||
                                                editingState.as(Workflow.Data.class).getCurrentState() != null)) {
                                            Date pd = editingState.as(Content.ObjectModification.class).getScheduleDate();

                                            if (pd != null) {
                                                publishDate = new DateTime(pd);
                                            }
                                        }
                                    }

                                    wp.writeElement("input",
                                            "type", "text",
                                            "class", "date dateInput",
                                            "data-emptylabel", "Now",
                                            "name", "publishDate",
                                            "size", 9,
                                            "value", publishDate != null ? publishDate.toString("yyyy-MM-dd HH:mm:ss") : "");
                                }

                                wp.writeStart("button",
                                        "name", "action-publish",
                                        "value", "true");
                                    ObjectType type = editingState.getType();
                                    if (type != null) {
                                        wp.writeHtml(ObjectUtils.firstNonBlank(type.as(ToolUi.class).getPublishButtonText(), wp.localize(type, "action.publish")));
                                    } else {
                                        wp.writeHtml(wp.localize(type, "action.publish"));
                                    }
                                wp.writeEnd();

                                if (wp.hasPermission("type/" + editingState.getTypeId() + "/archive") &&
                                        !isDraft &&
                                        !isHistory &&
                                        !editingState.isNew() &&
                                        (editingState.getType() == null ||
                                        !editingState.getType().getGroups().contains(Singleton.class.getName()))) {
                                    wp.writeStart("button",
                                            "class", "link icon icon-action-trash",
                                            "name", "action-trash",
                                            "value", "true");
                                        wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.archive"));
                                    wp.writeEnd();
                                }
                            wp.writeEnd();
                        }
                    }
                }

                wp.writeStart("ul", "class", "widget-publishingExtra");
                    if (isWritable && !isTrash) {
                        wp.writeStart("li");
                            wp.writeStart("button",
                                    "class", "link icon icon-object-draft",
                                    "name", "action-newDraft",
                                    "value", "true");

                                if (editingState.isNew()) {
                                    wp.writeHtml(wp.localize(editingState.getType(), "action.save.initialDraft"));

                                } else {
                                    wp.writeHtml(wp.localize(Draft.class, "action.newType"));
                                }

                            wp.writeEnd();
                        wp.writeEnd();
                    }
                wp.writeEnd();
                
      out.write("\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            ");
 renderWidgets(wp, editing, CmsTool.CONTENT_RIGHT_WIDGET_POSITION); 
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("</div>\n");
      out.write("\n");
 if (wp.isPreviewable(selected)) { 
      out.write("\n");
      out.write("    <div class=\"contentPreview\">\n");
      out.write("        <div class=\"widget widget-preview\">\n");
      out.write("            <h1>\n");
      out.write("                ");
 wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "title.preview")); 
      out.write("\n");
      out.write("            </h1>\n");
      out.write("\n");
      out.write("            ");

            String previewFormId = wp.createId();
            String previewTarget = wp.createId();
            String modeId = wp.createId();
            
      out.write("\n");
      out.write("\n");
      out.write("            <div class=\"widget-preview_controls\">\n");
      out.write("                <form enctype=\"multipart/form-data\" action=\"");
      out.print( wp.url("/content/sharePreview.jsp") );
      out.write("\" method=\"post\" target=\"_blank\">\n");
      out.write("                    <input name=\"");
      out.print( PageFilter.PREVIEW_ID_PARAMETER );
      out.write("\" type=\"hidden\" value=\"");
      out.print( state.getId() );
      out.write("\">\n");
      out.write("                    ");
 if (site != null) { 
      out.write("\n");
      out.write("                        <input name=\"");
      out.print( PageFilter.PREVIEW_SITE_ID_PARAMETER );
      out.write("\" type=\"hidden\" value=\"");
      out.print( site.getId() );
      out.write("\">\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                    <input name=\"");
      out.print( PageFilter.PREVIEW_OBJECT_PARAMETER );
      out.write("\" type=\"hidden\">\n");
      out.write("                    <input type=\"hidden\" name=\"scheduleId\" value=\"");
      out.print( user.getCurrentSchedule() != null ? user.getCurrentSchedule().getId() : "" );
      out.write("\">\n");
      out.write("                    <input name=\"previewDate\" type=\"hidden\">\n");
      out.write("                    <button class=\"action-share\">\n");
      out.write("                        ");
 wp.writeHtml(wp.localize("com.psddev.cms.tool.page.content.Edit", "action.share")); 
      out.write("\n");
      out.write("                    </button>\n");
      out.write("                </form>\n");
      out.write("\n");
      out.write("                ");

                wp.writeStart("form",
                        "method", "post",
                        "id", previewFormId,
                        "target", previewTarget,
                        "action", JspUtils.getAbsolutePath(request, "/_preview"));
                    wp.writeElement("input", "type", "hidden", "name", "_fields", "value", true);
                    wp.writeElement("input", "type", "hidden", "name", PageFilter.PREVIEW_ID_PARAMETER, "value", state.getId());
                    wp.writeElement("input", "type", "hidden", "name", PageFilter.PREVIEW_OBJECT_PARAMETER);

                    if (site != null) {
                        wp.writeElement("input", "type", "hidden", "name", PageFilter.PREVIEW_SITE_ID_PARAMETER, "value", site.getId());
                    }

                    wp.writeElement("input",
                            "type", "text",
                            "data-bsp-autosubmit", "",
                            "class", "date",
                            "name", "_date",
                            "placeholder", "Now",
                            "onchange", "$('.widget-preview_controls').find('form').eq(0).find(':input[name=\"previewDate\"]').val($(this).val());");

                    wp.writeHtml(" ");
                    wp.writeStart("select", "class", "deviceWidthSelect", "onchange",
                            "var $input = $(this)," +
                                    "$form = $input.closest('form');" +
                            "$('iframe[name=\"' + $form.attr('target') + '\"]').css('width', $input.val() || '100%');" +
                            "$form.submit();");
                        for (Device d : Device.values()) {
                            wp.writeStart("option", "value", d.width);
                                wp.writeHtml(d);
                            wp.writeEnd();
                        }
                    wp.writeEnd();

                    ObjectType editingType = editingState.getType();

                    if (editingType != null) {
                        Renderer.TypeModification rendererData = editingType.as(Renderer.TypeModification.class);
                        List<Object> refs = Query.
                                fromAll().
                                and("_any matches ?", editingState.getId()).
                                and("_id != ?", editingState.getId()).
                                and("_type != ?", Draft.class).
                                select(0, 10).
                                getItems();

                        if (!refs.isEmpty()) {
                            wp.writeHtml(" ");
                            wp.writeStart("select",
                                    "name", "_mainObjectId",
                                    "onchange", "$(this).closest('form').submit();",
                                    "style", "width:200px;");
                                wp.writeStart("option", "value", "");
                                    wp.writeTypeObjectLabel(editing);
                                wp.writeEnd();

                                for (Object ref : refs) {
                                    wp.writeStart("option", "value", State.getInstance(ref).getId());
                                        wp.writeTypeObjectLabel(ref);
                                    wp.writeEnd();
                                }
                            wp.writeEnd();
                        }

                        List<Context> contexts = new ArrayList<Context>();
                        Integer embedPreviewWidth = rendererData.getEmbedPreviewWidth();

                        contexts.add(new Context("", null, "Default"));

                        if (embedPreviewWidth <= 0) {
                            embedPreviewWidth = null;
                        }

                        for (String context : rendererData.getPaths().keySet()) {
                            if (!ObjectUtils.isBlank(context)) {
                                contexts.add(new Context(context, embedPreviewWidth, StringUtils.toLabel(context)));
                            }
                        }

                        if (contexts.size() > 1) {
                            wp.writeHtml(" ");
                            wp.writeStart("select",
                                    "name", "_context",
                                    "onchange",
                                            "var $input = $(this)," +
                                                    "$form = $input.closest('form');" +
                                            "$('iframe[name=\"' + $form.attr('target') + '\"]').css('width', $input.find(':selected').attr('data-width') || '100%');" +
                                            "$form.submit();");
                                for (Context context : contexts) {
                                    wp.writeStart("option",
                                            "value", context.value,
                                            "data-width", context.width);
                                        wp.writeHtml("Context: ");
                                        wp.writeHtml(context.label);
                                    wp.writeEnd();
                                }
                            wp.writeEnd();
                        }
                    }

                    Set<Directory.Path> paths = editingState.as(Directory.Data.class).getPaths();

                    if (paths != null && !paths.isEmpty()) {
                        wp.writeHtml(" ");
                        wp.writeStart("select",
                                "data-bsp-autosubmit", "",
                                "name", "_previewPath");
                            for (Directory.Path p : paths) {
                                Site s = p.getSite();
                                String path = p.getPath();

                                if (s != null) {
                                    wp.writeStart("option", "value", s.getId() + ":" + path);
                                        wp.writeObjectLabel(s);
                                        wp.writeHtml(": ");
                                        wp.writeHtml(path);
                                    wp.writeEnd();

                                } else {
                                    wp.writeStart("option", "value", path);
                                        wp.writeHtml(path);
                                    wp.writeEnd();
                                }
                            }
                        wp.writeEnd();
                    }
                wp.writeEnd();
                
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    ");
 if (!wp.getUser().isDisableNavigateAwayAlert() &&
            (wp.getCmsTool().isDisableAutomaticallySavingDrafts() ||
            (!editingState.isNew() &&
            !editingState.as(Content.ObjectModification.class).isDraft()))) { 
      out.write("\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            (function($, window, undefined) {\n");
      out.write("                $('.contentForm').submit(function() {\n");
      out.write("                    $.data(this, 'submitting', true);\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(window).bind('beforeunload', function() {\n");
      out.write("                    var $form = $('.contentForm');\n");
      out.write("\n");
      out.write("                    return !$.data($form[0], 'submitting') && $form.find('.state-changed').length > 0 ?\n");
      out.write("                            'Are you sure you want to leave this page? Unsaved changes will be lost.' :\n");
      out.write("                            undefined;\n");
      out.write("                });\n");
      out.write("            })(jQuery, window);\n");
      out.write("        </script>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        (function($, win, undef) {\n");
      out.write("            var PEEK_WIDTH = 160,\n");
      out.write("                    $win = $(win),\n");
      out.write("                    doc = win.document,\n");
      out.write("                    $doc = $(doc),\n");
      out.write("                    $body = $(doc.body),\n");
      out.write("\n");
      out.write("                    $edit = $('.content-edit'),\n");
      out.write("                    $publishingExtra = $('.widget-publishingExtra'),\n");
      out.write("                    $previewAction,\n");
      out.write("                    appendPreviewAction,\n");
      out.write("                    removePreviewAction,\n");
      out.write("\n");
      out.write("                    $preview = $('.contentPreview'),\n");
      out.write("                    $previewWidget = $preview.find('.widget-preview'),\n");
      out.write("                    $previewHeading = $preview.find('h1'),\n");
      out.write("                    showPreview,\n");
      out.write("                    previewEventsBound,\n");
      out.write("                    hidePreview,\n");
      out.write("\n");
      out.write("                    getUniqueColor,\n");
      out.write("                    fieldHue = Math.random(),\n");
      out.write("                    GOLDEN_RATIO = 0.618033988749895;\n");
      out.write("\n");
      out.write("            if ($edit.closest('.popup').length > 0) {\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Append a link for activating the preview.\n");
      out.write("            appendPreviewAction = function() {\n");
      out.write("                $previewAction = $('<li/>', {\n");
      out.write("                    'html': $('<a/>', {\n");
      out.write("                        'class': 'action-preview',\n");
      out.write("                        'href': '#',\n");
      out.write("                        'text': 'Preview',\n");
      out.write("                        'click': function() {\n");
      out.write("                            removePreviewAction();\n");
      out.write("                            showPreview();\n");
      out.write("                            $previewHeading.click();\n");
      out.write("                            return false;\n");
      out.write("                        }\n");
      out.write("                    })\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $publishingExtra.append($previewAction);\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            removePreviewAction = function() {\n");
      out.write("                $previewAction.remove();\n");
      out.write("                $previewAction = null;\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            // Show a peekable preview widget.\n");
      out.write("            showPreview = function() {\n");
      out.write("                var $previewForm = $('#");
      out.print( previewFormId );
      out.write("'),\n");
      out.write("                        $contentForm = $('.contentForm'),\n");
      out.write("                        action = win.location.href,\n");
      out.write("                        questionAt = action.indexOf('?'),\n");
      out.write("                        oldFormData,\n");
      out.write("                        loadPreview;\n");
      out.write("\n");
      out.write("                $previewWidget.addClass('widget-loading');\n");
      out.write("                $preview.show();\n");
      out.write("\n");
      out.write("                $edit.css({\n");
      out.write("                    'max-width': 1100\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                if (!previewEventsBound) {\n");
      out.write("                    $preview.append($('<span/>', {\n");
      out.write("                        'class': 'contentPreviewClose',\n");
      out.write("                        'text': 'Close',\n");
      out.write("                        'click': function() {\n");
      out.write("                            hidePreview();\n");
      out.write("                            return false;\n");
      out.write("                        }\n");
      out.write("                    }));\n");
      out.write("\n");
      out.write("                    // Preview should be roughly the same width as the window.\n");
      out.write("                    $win.resize($.throttle(500, function() {\n");
      out.write("                        if (!$preview.is(':visible')) {\n");
      out.write("                            return;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        var $toolHeader = $('.toolHeader');\n");
      out.write("\n");
      out.write("                        $preview.css('width', '');\n");
      out.write("                        $edit.css('margin-right', $preview.outerWidth(true));\n");
      out.write("\n");
      out.write("                        var $widgetWidth = $win.width() - PEEK_WIDTH;\n");
      out.write("                        var $widgetControls = $('.widget-preview_controls');\n");
      out.write("\n");
      out.write("                        $widgetControls.width($widgetWidth - 60);\n");
      out.write("                        $('.widget-previewFrameContainer').css('top', $widgetControls.outerHeight(true) + 40);\n");
      out.write("                        $preview.css({\n");
      out.write("                            top: $toolHeader.offset().top + $toolHeader.outerHeight() - $win.scrollTop(),\n");
      out.write("                            width: $previewWidget.is('.widget-expanded')\n");
      out.write("                                    ? $widgetWidth\n");
      out.write("                                    : $win.width() - $edit.offset().left - $edit.outerWidth() + 10\n");
      out.write("                        });\n");
      out.write("                    }));\n");
      out.write("\n");
      out.write("                    // Make the preview expand/collapse when the heading is clicked.\n");
      out.write("                    $previewHeading.click(function() {\n");
      out.write("                        // $edit.find('.inputContainer').trigger('fieldPreview-disable');\n");
      out.write("\n");
      out.write("                        if ($previewWidget.is('.widget-expanded')) {\n");
      out.write("                            $('.queryField_frames').show();\n");
      out.write("                            $previewWidget.removeClass('widget-expanded');\n");
      out.write("                            $preview.animate({ 'width': $win.width() - $edit.offset().left - $edit.outerWidth() + 10 }, 300, 'easeOutBack');\n");
      out.write("\n");
      out.write("                            $.ajax({\n");
      out.write("                                'type': 'post',\n");
      out.write("                                'url': CONTEXT_PATH + '/misc/updateUserSettings',\n");
      out.write("                                'data': 'action=liveContentPreview-enable'\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                        } else {\n");
      out.write("                            $('.queryField_frames').hide();\n");
      out.write("                            $previewWidget.addClass('widget-expanded');\n");
      out.write("                            $preview.animate({ 'width': $win.width() - PEEK_WIDTH }, 300, 'easeOutBack');\n");
      out.write("\n");
      out.write("                            // $edit.find('.inputContainer').trigger('fieldPreview-enable');\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("\n");
      out.write("                    previewEventsBound = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                $win.resize();\n");
      out.write("\n");
      out.write("                // Load the preview.\n");
      out.write("                loadPreview = $.throttle(2000, function() {\n");
      out.write("                    if (!$preview.is(':visible')) {\n");
      out.write("                        return;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    var newFormData = $contentForm.serialize();\n");
      out.write("\n");
      out.write("                    // If the form inputs haven't changed, try again later.\n");
      out.write("                    if (oldFormData === newFormData) {\n");
      out.write("                        setTimeout(loadPreview, 100);\n");
      out.write("                        return;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    oldFormData = newFormData;\n");
      out.write("                    $previewWidget.addClass('widget-loading');\n");
      out.write("\n");
      out.write("                    // Get the correct JSON from the server.\n");
      out.write("                    $.ajax({\n");
      out.write("                        'data': newFormData,\n");
      out.write("                        'type': 'post',\n");
      out.write("                        'url': CONTEXT_PATH + 'content/state.jsp?id=");
      out.print( state.getId() );
      out.write("&' + (questionAt > -1 ? action.substring(questionAt + 1) : ''),\n");
      out.write("                        'complete': function(request) {\n");
      out.write("                            var $previewTarget,\n");
      out.write("                                    setHeightTimer,\n");
      out.write("                                    setHeight;\n");
      out.write("\n");
      out.write("                            // Make sure that the preview IFRAME exists.\n");
      out.write("                            $(':input[name=");
      out.print( PageFilter.PREVIEW_OBJECT_PARAMETER );
      out.write("]').val(request.responseText);\n");
      out.write("                            $previewTarget = $('iframe[name=");
      out.print( previewTarget );
      out.write("]');\n");
      out.write("\n");
      out.write("                            if ($previewTarget.length === 0) {\n");
      out.write("                                $previewTarget = $('<iframe/>', {\n");
      out.write("                                    'name': '");
      out.print( previewTarget );
      out.write("',\n");
      out.write("                                    'css': {\n");
      out.write("                                        'border-style': 'none',\n");
      out.write("                                        'height': '1000px',\n");
      out.write("                                        'margin': 0,\n");
      out.write("                                        'overflow': 'hidden',\n");
      out.write("                                        'padding': 0,\n");
      out.write("                                        'width': $previewForm.find('select.deviceWidthSelect').val() || '100%'\n");
      out.write("                                    }\n");
      out.write("                                });\n");
      out.write("                                $previewWidget.append($('<div/>', {\n");
      out.write("                                    'class': 'widget-previewFrameContainer',\n");
      out.write("                                    'html': $previewTarget\n");
      out.write("                                }));\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                            // Resize IFRAME so that there isn't a scrollbar.\n");
      out.write("                            setHeight = function() {\n");
      out.write("                                var $body;\n");
      out.write("\n");
      out.write("                                if ($previewTarget[0]) {\n");
      out.write("                                    $body = $($previewTarget[0].contentWindow.document.body);\n");
      out.write("                                    $body.css('overflow', 'hidden');\n");
      out.write("                                    $previewTarget.height(Math.max($edit.outerHeight(true), $body.outerHeight(true)));\n");
      out.write("\n");
      out.write("                                } else if (setHeightTimer) {\n");
      out.write("                                    clearInterval(setHeightTimer);\n");
      out.write("                                    setHeightTimer = null;\n");
      out.write("                                }\n");
      out.write("                            };\n");
      out.write("\n");
      out.write("                            setHeightTimer = setInterval(setHeight, 100);\n");
      out.write("\n");
      out.write("                            $previewTarget.load(function() {\n");
      out.write("                                $previewWidget.removeClass('widget-loading');\n");
      out.write("                                setHeight();\n");
      out.write("                                if (setHeightTimer) {\n");
      out.write("                                    clearInterval(setHeightTimer);\n");
      out.write("                                    setHeightTimer = null;\n");
      out.write("                                }\n");
      out.write("                            });\n");
      out.write("\n");
      out.write("                            // Really load the preview.\n");
      out.write("                            $previewForm.submit();\n");
      out.write("                            setTimeout(loadPreview, 100);\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                loadPreview();\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            hidePreview = function() {\n");
      out.write("                if ($previewWidget.is('.widget-expanded')) {\n");
      out.write("                    $previewHeading.click();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // $edit.find('.inputContainer').trigger('fieldPreview-hide');\n");
      out.write("                $edit.css({\n");
      out.write("                    'max-width': '',\n");
      out.write("                    'margin-right': ''\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                appendPreviewAction();\n");
      out.write("                $preview.hide();\n");
      out.write("                $win.resize();\n");
      out.write("\n");
      out.write("                $.ajax({\n");
      out.write("                    'type': 'post',\n");
      out.write("                    'url': CONTEXT_PATH + '/misc/updateUserSettings',\n");
      out.write("                    'data': 'action=liveContentPreview-disable'\n");
      out.write("                });\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            ");
 if (Boolean.TRUE.equals(wp.getUser().getState().get("liveContentPreview"))) { 
      out.write("\n");
      out.write("                showPreview();\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                appendPreviewAction();\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            // Per-field preview.\n");
      out.write("            getUniqueColor = function($container) {\n");
      out.write("                var color = $.data($container[0], 'fieldPreview-color');\n");
      out.write("\n");
      out.write("                if (!color) {\n");
      out.write("                    fieldHue += GOLDEN_RATIO;\n");
      out.write("                    fieldHue %= 1.0;\n");
      out.write("                    color = 'hsl(' + (fieldHue * 360) + ', 50%, 50%)';\n");
      out.write("                    $.data($container[0], 'fieldPreview-color', color);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return color;\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'mouseenter', function() {\n");
      out.write("                var $container = $(this),\n");
      out.write("                        $toggle = $.data($container[0], 'fieldPreview-$toggle');\n");
      out.write("\n");
      out.write("                if ($preview.is(':visible')) {\n");
      out.write("                    if (!$toggle) {\n");
      out.write("                        $toggle = $('<span/>', {\n");
      out.write("                            'class': 'fieldPreviewToggle'\n");
      out.write("                        });\n");
      out.write("\n");
      out.write("                        $.data($container[0], 'fieldPreview-$toggle', $toggle);\n");
      out.write("                        $container.append($toggle);\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                } else if ($toggle) {\n");
      out.write("                    $toggle.remove();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer .fieldPreviewToggle', 'click', function() {\n");
      out.write("                var $toggle = $(this),\n");
      out.write("                        $container = $toggle.closest('.inputContainer');\n");
      out.write("\n");
      out.write("                $container.find('> .inputLabel').trigger('fieldPreview-toggle', [ $toggle ]);\n");
      out.write("                $toggle.css('color', $container.is('.fieldPreview-displaying') ? getUniqueColor($container) : '');\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'fieldPreview-enable', function() {\n");
      out.write("                $(this).addClass('fieldPreview-enabled');\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'fieldPreview-disable', function() {\n");
      out.write("                $(this).trigger('fieldPreview-hide').removeClass('fieldPreview-enabled');\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'fieldPreview-hide', function() {\n");
      out.write("                var $container = $(this),\n");
      out.write("                        name = $container.attr('data-name');\n");
      out.write("\n");
      out.write("                $container.removeClass('fieldPreview-displaying');\n");
      out.write("                $container.find('> .inputLabel').css({\n");
      out.write("                    'background-color': '',\n");
      out.write("                    'color': ''\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $('.fieldPreviewTarget[data-name=\"' + name + '\"]').remove();\n");
      out.write("                $('.fieldPreviewPaths[data-name=\"' + name + '\"]').remove();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'fieldPreview-toggle', function(event, $source) {\n");
      out.write("                var $container = $(this),\n");
      out.write("                        name = $container.attr('data-name'),\n");
      out.write("                        color,\n");
      out.write("\n");
      out.write("                        $frame,\n");
      out.write("                        frameOffset,\n");
      out.write("\n");
      out.write("                        $paths,\n");
      out.write("                        pathsCanvas;\n");
      out.write("\n");
      out.write("                event.stopPropagation();\n");
      out.write("\n");
      out.write("                if ($container.is('.fieldPreview-displaying')) {\n");
      out.write("                    $container.trigger('fieldPreview-hide');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                color = getUniqueColor($container);\n");
      out.write("\n");
      out.write("                $frame = $preview.find('iframe');\n");
      out.write("                frameOffset = $frame.offset();\n");
      out.write("\n");
      out.write("                $container.addClass('fieldPreview-displaying');\n");
      out.write("                $container.find('> .inputLabel').css({\n");
      out.write("                    'background-color': color,\n");
      out.write("                    'color': 'white'\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                // Draw arrows between the label and the previews.\n");
      out.write("                $paths = $('<canvas/>', {\n");
      out.write("                    'class': 'fieldPreviewPaths',\n");
      out.write("                    'data-name': name,\n");
      out.write("                    'css': {\n");
      out.write("                        'left': 0,\n");
      out.write("                        'pointer-events': 'none',\n");
      out.write("                        'position': 'absolute',\n");
      out.write("                        'top': 0,\n");
      out.write("                        'z-index': 5\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                // For browsers that don't support pointer-events.\n");
      out.write("                $paths.click(function() {\n");
      out.write("                    $edit.find('.inputContainer').trigger('fieldPreview-hide');\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $paths.attr({\n");
      out.write("                    'width': $doc.width(),\n");
      out.write("                    'height': $doc.height()\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $body.append($paths);\n");
      out.write("\n");
      out.write("                pathsCanvas = $paths[0].getContext('2d');\n");
      out.write("\n");
      out.write("                var PLACEHOLDER_PREFIX = 'brightspot.field-access '\n");
      out.write("                var frameDocument = $frame[0].contentDocument;\n");
      out.write("                var frameCommentWalker = frameDocument.createTreeWalker(frameDocument.body, NodeFilter.SHOW_COMMENT, null, null);\n");
      out.write("\n");
      out.write("                while (frameCommentWalker.nextNode()) {\n");
      out.write("                    var placeholder = frameCommentWalker.currentNode;\n");
      out.write("                    var placeholderValue = placeholder.nodeValue;\n");
      out.write("\n");
      out.write("                    if (placeholderValue.indexOf(PLACEHOLDER_PREFIX) !== 0) {\n");
      out.write("                        continue;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    var placeholderData = $.parseJSON(placeholderValue.substring(PLACEHOLDER_PREFIX.length));\n");
      out.write("\n");
      out.write("                    if (placeholderData.name !== name) {\n");
      out.write("                        continue;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    var $placeholder = $(frameCommentWalker.currentNode),\n");
      out.write("                            $target,\n");
      out.write("                            targetOffset,\n");
      out.write("                            pathSourceX, pathSourceY, pathSourceDirection,\n");
      out.write("                            pathTargetX, pathTargetY, pathTargetDirection,\n");
      out.write("                            sourceOffset,\n");
      out.write("                            targetOffset,\n");
      out.write("                            isBackReference = false,\n");
      out.write("                            pathSourceControlX,\n");
      out.write("                            pathSourceControlY,\n");
      out.write("                            pathTargetControlX,\n");
      out.write("                            pathTargetControlY;\n");
      out.write("\n");
      out.write("                    if ($placeholder.parent().is('body')) {\n");
      out.write("                        continue;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    $target = $placeholder.nextAll(':visible:first');\n");
      out.write("\n");
      out.write("                    if ($target.length === 0) {\n");
      out.write("                        $target = $placeholder.parent();\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if ($target.find('> * [data-name=\"' + name + '\"]').length > 0) {\n");
      out.write("                        continue;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    targetOffset = $target.offset();\n");
      out.write("\n");
      out.write("                    $body.append($('<span/>', {\n");
      out.write("                        'class': 'fieldPreviewTarget',\n");
      out.write("                        'data-name': name,\n");
      out.write("                        'css': {\n");
      out.write("                            'outline-color': color,\n");
      out.write("                            'height': $target.outerHeight(),\n");
      out.write("                            'left': frameOffset.left + targetOffset.left,\n");
      out.write("                            'position': 'absolute',\n");
      out.write("                            'top': frameOffset.top + targetOffset.top,\n");
      out.write("                            'width': $target.outerWidth()\n");
      out.write("                        }\n");
      out.write("                    }));\n");
      out.write("\n");
      out.write("                    if (!$source) {\n");
      out.write("                        $source = $container.find('> .inputLabel');\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    sourceOffset = $source.offset();\n");
      out.write("                    targetOffset = $target.offset();\n");
      out.write("                    targetOffset.left += frameOffset.left;\n");
      out.write("                    targetOffset.top += frameOffset.top;\n");
      out.write("\n");
      out.write("                    if (sourceOffset.left > targetOffset.left) {\n");
      out.write("                        var targetWidth = $target.outerWidth();\n");
      out.write("                        pathTargetX = targetOffset.left + targetWidth + 3;\n");
      out.write("                        pathTargetY = targetOffset.top + $target.outerHeight() / 2;\n");
      out.write("                        isBackReference = true;\n");
      out.write("\n");
      out.write("                        if (targetOffset.left + targetWidth > sourceOffset.left) {\n");
      out.write("                            pathSourceX = sourceOffset.left + $source.width();\n");
      out.write("                            pathSourceY = sourceOffset.top + $source.height() / 2;\n");
      out.write("                            pathSourceDirection = 1;\n");
      out.write("                            pathTargetDirection = 1;\n");
      out.write("\n");
      out.write("                        } else {\n");
      out.write("                            pathSourceX = sourceOffset.left;\n");
      out.write("                            pathSourceY = sourceOffset.top + $source.height() / 2;\n");
      out.write("                            pathSourceDirection = -1;\n");
      out.write("                            pathTargetDirection = 1;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                    } else {\n");
      out.write("                        pathSourceX = sourceOffset.left + $source.width();\n");
      out.write("                        pathSourceY = sourceOffset.top + $source.height() / 2;\n");
      out.write("                        pathTargetX = targetOffset.left - 3;\n");
      out.write("                        pathTargetY = targetOffset.top + $target.height() / 2;\n");
      out.write("                        pathSourceDirection = 1;\n");
      out.write("                        pathTargetDirection = -1;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    pathSourceControlX = pathSourceX + pathSourceDirection * 100;\n");
      out.write("                    pathSourceControlY = pathSourceY;\n");
      out.write("                    pathTargetControlX = pathTargetX + pathTargetDirection * 100;\n");
      out.write("                    pathTargetControlY = pathTargetY;\n");
      out.write("\n");
      out.write("                    pathsCanvas.strokeStyle = color;\n");
      out.write("                    pathsCanvas.fillStyle = color;\n");
      out.write("\n");
      out.write("                    // Reference curve.\n");
      out.write("                    pathsCanvas.lineWidth = isBackReference ? 0.4 : 1.0;\n");
      out.write("                    pathsCanvas.beginPath();\n");
      out.write("                    pathsCanvas.moveTo(pathSourceX, pathSourceY);\n");
      out.write("                    pathsCanvas.bezierCurveTo(pathSourceControlX, pathSourceControlY, pathTargetControlX, pathTargetControlY, pathTargetX, pathTargetY);\n");
      out.write("                    pathsCanvas.stroke();\n");
      out.write("\n");
      out.write("                    // Arrow head.\n");
      out.write("                    var arrowSize = pathTargetX > pathTargetControlX ? 5 : -5;\n");
      out.write("                    if (isBackReference) {\n");
      out.write("                        arrowSize *= 0.8;\n");
      out.write("                    }\n");
      out.write("                    pathsCanvas.beginPath();\n");
      out.write("                    pathsCanvas.moveTo(pathTargetX, pathTargetY);\n");
      out.write("                    pathsCanvas.lineTo(pathTargetX - 2 * arrowSize, pathTargetY - arrowSize);\n");
      out.write("                    pathsCanvas.lineTo(pathTargetX - 2 * arrowSize, pathTargetY + arrowSize);\n");
      out.write("                    pathsCanvas.closePath();\n");
      out.write("                    pathsCanvas.fill();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $edit.delegate('.inputContainer', 'click', function() {\n");
      out.write("                if ($previewWidget.is('.widget-expanded')) {\n");
      out.write("                    $(this).trigger('fieldPreview-toggle');\n");
      out.write("                    return false;\n");
      out.write("\n");
      out.write("                } else {\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        })(jQuery, window);\n");
      out.write("    </script>\n");
 } 
      out.write('\n');
      out.write('\n');
 wp.include("/WEB-INF/footer.jsp"); 
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
